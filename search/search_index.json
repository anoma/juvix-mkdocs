{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Your Documentation Project with support for Juvix Code Blocks","text":""},{"location":"index.html#installation","title":"Installation","text":"<p>This is a testing website for the <code>juvix-mkdocs</code> package, a MkDocs plugin for Juvix that can render Juvix code blocks in Markdown files. To install it, run:</p> <pre><code>pip3 install mkdocs-juvix-plugin\n</code></pre> <p>If you already have a project, add the plugin and add the following to your <code>mkdocs.yml</code> file:</p> mkdocs.yml<pre><code>plugins:\n  - juvix\n</code></pre>"},{"location":"index.html#creating-a-new-project-optional-but-recommended","title":"Creating a new project (optional but recommended)","text":"<p>This website is an example of a documentation website that is built using this package, and the CLI command <code>juvix-mkdocs new</code> included in this package.</p> <p>Running <code>juvix-mkdocs new</code> without any flags will create a new project with a minimal setup, all the files needed to get started.</p> <pre><code>juvix-mkdocs new my-juvix-project\n</code></pre> <p>Checkout all the options with:</p> <pre><code>juvix-mkdocs new --help\n</code></pre> <p>Or all the subcommands with:</p> <pre><code>juvix-mkdocs --help\n</code></pre> <p>if you want to use the Anoma setup, you can run:</p> <pre><code>juvix-mkdocs new my-juvix-project --anoma-setup\n</code></pre> <p>So, we'll assume that you have already installed <code>juvix</code> and <code>mkdocs</code> on your system. If you haven't installed them yet, please follow the installation instructions on the official Juvix and MkDocs websites.</p>"},{"location":"index.html#building-and-running-the-website","title":"Building and running the website","text":"<p>The <code>juvix-mkdocs</code> package includes a CLI that helps you build and run the website, assuming that you have a project already created and that it was built using poetry.</p> <p>To build the website, run:</p> <pre><code>juvix-mkdocs build\n</code></pre> <p>To run the website, run:</p> <pre><code>juvix-mkdocs serve\n</code></pre> <p>These commands are wrappers of <code>poetry run mkdocs build</code> and <code>poetry run mkdocs serve</code>.</p>"},{"location":"index.html#juvix-markdown-file-structure","title":"Juvix Markdown file structure","text":"<p>A Juvix Markdown file is a file with extension <code>.juvix.md</code>. These files are preprocesses by the Juvix compiler to generate the final Markdown file using this plugin.</p> <p>Very important to note is that the first Juvix code block in a Juvix Markdown file must declare a module with the name of the file, and each block should be a sequence of well-defined expressions. This means submodules cannot be split across blocks. The name of module must follow the folder structure of the file is in. For example, the file <code>tutorial/basics.juvix.md</code> must declare the module <code>tutorial.basics</code>.</p> tutorial/basics.juvix.md<pre><code>module tutorial.basics;\n-- ...\n</code></pre> <p>Refer to the test.juvix.md file located in the <code>docs</code> folder to see an example.</p>"},{"location":"index.html#include-juvix-code-within-code-blocks","title":"Include Juvix code within Code Blocks","text":"mkdocs.yml<pre><code>plugins:\n  - juvix\n</code></pre>"},{"location":"index.html#hide-juvix-code-blocks","title":"Hide Juvix code blocks","text":"<p>Juvix code blocks come with a few extra features, such as the ability to hide the code block from the final output. This is done by adding the <code>hide</code> attribute to the code block. For example:</p> <pre><code>````juvix hide\nmodule tutorial.basics;\n-- ...\n```</code></pre>"},{"location":"index.html#extract-inner-module-statements","title":"Extract inner module statements","text":"<p>Another feature is the ability to extract inner module statements from the code block. This is done by adding the <code>extract-module-statements</code> attribute to the code block. This option can be accompanied by a number to indicate the number of statements to extract. For example, the following would only display the content inside the module <code>B</code>, that is, the module <code>C</code>.</p> <pre><code>````juvix extract-module-statements\nmodule B;\nmodule C;\n-- ...\n```</code></pre>"},{"location":"index.html#generate-isabelle-theories-for-inclusion-in-the-documentation","title":"Generate Isabelle theories for inclusion in the documentation","text":"<p>Check out the Isabelle generated content from Juvix page for more information.</p> <pre><code>---\nisabelle: true\n---\n</code></pre> <p>Or</p> <pre><code>---\nisabelle:\n- generate: true\n- include_at_bottom: true\n---\n</code></pre>"},{"location":"index.html#snippet-for-generated-isabelle-files","title":"Snippet for generated Isabelle files","text":"<p>For including generated Isabelle files, the path of the file must end with <code>!thy</code>, the raw content of the Isabelle theory file will be included. Of course, you need to configure the <code>snippet</code> markdown extension.</p> <pre><code>--8&lt;-- \"docs/isabelle.juvix.md!thy:isabelle-add-def\"\n</code></pre> <p>This provides the following output:</p> isabelle.thy from isabelle.juvix.md<pre><code>fun add :: \"Nat \\&lt;Rightarrow&gt; Nat \\&lt;Rightarrow&gt; Nat\" where\n  \"add zero n = n\" |\n  \"add (succ m) n = (succ (add m n))\"\n\nend\n</code></pre>"},{"location":"index.html#snippets-plugin","title":"Snippets Plugin","text":"mkdocs.yml<pre><code>markdown_extensions:\n  - mkdocs_juvix.snippets:\n      check_paths: true\n</code></pre> <p>Info</p> <p>If you already have <code>wikilinks</code> enabled, you don't need to enable <code>mkdocs_juvix.snippets</code>. It's loaded automatically.</p>"},{"location":"index.html#excerpt-wrapping-syntax","title":"Excerpt Wrapping Syntax","text":"<p>Enclose the excerpt with the following tags:</p> <pre><code>&lt;!-- Start snippet --&gt;\n;--8&lt;-- [start:TAG]\n...\n;--8&lt;-- [end:TAG]\n&lt;!-- End snippet --&gt;\n</code></pre>"},{"location":"index.html#snippet-inclusion-syntax","title":"Snippet Inclusion Syntax","text":"<p>To incorporate the excerpt elsewhere, specify its path and tag:</p> <pre><code>--8&lt;-- \"path/to/file.ext:TAG\"\n</code></pre>"},{"location":"index.html#snippets-of-juvix-code","title":"Snippets of Juvix code","text":"<p>You can also include snippets of Juvix code in your Markdown files. This is done by adding the <code>--8&lt;--</code> comment followed by the path to the file, and optionally a snippet identifier.</p> <p>Note</p> <p>If the path of the file ends with <code>!</code>, the raw content of the file will be included. Otherwise, for Juvix Markdown files, the content will be preprocessed by the Juvix compiler and then the generated HTML will be included.</p> <p>Snippet identifier</p> <p>To use a snippet identifier, you must wrap the Juvix code block with the syntax <code>&lt;!-- --8&lt;-- [start:snippet_identifier] --&gt;</code> and <code>&lt;!-- --8&lt;-- [end:snippet_identifier] --&gt;</code>. This technique is useful for including specific sections of a file. Alternatively, you use the standard <code>--8&lt;--</code> markers within the code and extract the snippet by appending a ! at the end of the path.</p>"},{"location":"index.html#snippet-for-generated-isabelle-files_1","title":"Snippet for generated Isabelle files","text":"<p>For including generated Isabelle files, the path of the file must end with <code>!thy</code>, the raw content of the Isabelle theory file will be included.</p> <pre><code>--8&lt;-- \"docs/isabelle.juvix.md!thy:isabelle-add-def\"\n</code></pre> <p>This provides the following output:</p> isabelle.thy from isabelle.juvix.md<pre><code>fun add :: \"Nat \\&lt;Rightarrow&gt; Nat \\&lt;Rightarrow&gt; Nat\" where\n  \"add zero n = n\" |\n  \"add (succ m) n = (succ (add m n))\"\n\nend\n</code></pre>"},{"location":"index.html#todos-plugin","title":"Todos Plugin","text":"mkdocs.yml<pre><code>plugins:\n  - todos\n</code></pre> <p>Incorporate todos with the following syntax:</p> <pre><code>!!! todo\n\n    Content of the todo\n</code></pre> <p>The above renders as:</p> <p>Todo</p> <p>Content of the todo</p> <p>Info</p> <p>Be aware that todos are automatically removed from the online version. If you want to keep them, set <code>todos: True</code> in the front matter.</p>"},{"location":"index.html#diagrams-using-kroki","title":"Diagrams using Kroki","text":"mkdocs.yml<pre><code>plugins:\n  - kroki:  # docs: https://github.com/AVATEAM-IT-SYSTEMHAUS/mkdocs-kroki-plugin#readme\n      ServerURL: !ENV [KROKI_SERVER_URL, 'https://kroki.io'] #https://kroki.io/examples.html\n      FileTypes:\n        - png\n        - svg\n      FileTypeOverrides:\n        mermaid: png\n      FailFast: !ENV CI\n</code></pre> <p>Check out the Diagrams using Kroki page for more some examples.</p>"},{"location":"index.html#support-for-wiki-links","title":"Support for Wiki Links","text":"mkdocs.yml<pre><code>plugins:\n  - wikilinks\n</code></pre> <p>Wiki links offer a simple method for citing and referencing other pages in the documentation without lengthy URLs. Wiki links are the preferred method for linking to other pages in the documentation, so please use them whenever possible.</p>"},{"location":"index.html#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for a wiki link is:</p> <pre><code>[[page]]\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> </ul>"},{"location":"index.html#full-syntax","title":"Full Syntax","text":"<p>The full syntax for a wiki link is: Wiki Link Syntax<pre><code>  [[hintpath/to:page#anchor|Custom caption]]\n</code></pre></p> <p>When resolving a wiki link, the system follows these rules:</p>"},{"location":"index.html#page-title","title":"Page Title","text":"<p>(Mandatory) The 'page' in a wiki link refers to the title specified in the <code>nav</code> attribute of the <code>mkdocs.yml</code> file. For example,</p> mkdocs.yml<pre><code>nav:\n  - Home: index.md\n  - MyRef X: reference.md\n</code></pre> <p>provides the following wiki link:</p> <pre><code>[[MyRef X]]\n</code></pre>"},{"location":"index.html#path-hints","title":"Path Hints","text":"<p>(Optional) You can use path hints to specify the location of the file. The syntax is:</p> Path Hints<pre><code>[[hintpath/to:page]]\n</code></pre> <p>Where:</p> <ul> <li><code>hintpath/to</code> is the path (or prefix) to the file</li> <li><code>page</code> is the title of the target page</li> </ul>"},{"location":"index.html#anchors","title":"Anchors","text":"<p>(Optional) Use anchors to link to specific sections within a page. If the page does not have an anchor, the link would render as the caption provided, and you'll find a warning in the build process.</p> Anchors<pre><code>[[page#anchor]]\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> <li><code>anchor</code> is a specific section within the page</li> </ul>"},{"location":"index.html#custom-captions","title":"Custom captions","text":"<p>(Optional) Provide custom text to display for the link instead of the page title.</p> Custom Captions<pre><code>[[page#anchor|Custom caption]]\n</code></pre> <p>Where:</p> <ul> <li><code>page</code> is the title of the target page</li> <li><code>anchor</code> is a specific section within the page</li> </ul> <p>Captions can include icons, for example:</p> MarkdownPreview <pre><code>[[index | :material-link: this is a caption with an icon ]]\n</code></pre> <p> this is a caption with an icon</p>"},{"location":"index.html#list-of-wiki-style-links-per-page","title":"List of wiki-style links per Page","text":"<p>By default, the build process will generate a list of all wiki-style links per page. This list is displayed at the bottom of the page, and it is useful for identifying broken links or pages that are not linked to from other pages.</p> <p>To disable this feature, set the <code>list_wikilinks</code> option to <code>false</code> in the front matter of the page.</p> <pre><code>list_wikilinks: false\n</code></pre>"},{"location":"index.html#bibliography-support","title":"Bibliography support","text":"<pre><code># mkdocs.yml\nplugins:\n  - bibtex:\n      bib_dir: \"docs/references\"\n</code></pre> <p>Place your <code>.bib</code> files within the <code>docs/references</code> directory.</p> <p>Any new <code>.bib</code> file added to this folder will automatically be processed.</p>"},{"location":"index.html#citing-in-markdown","title":"Citing in Markdown","text":"<p>Use the citation key from your <code>.bib</code> files to cite references in your markdown files. The syntax is as follows:</p> <pre><code>This statement requires a citation [@citation_key].\n</code></pre> Wiki links on this page<ul><li>test</li><li>isabelle</li><li>diagrams</li><li>index</li></ul>"},{"location":"diagrams.html","title":"Diagrams with Kroki","text":"<pre><code><pre>module diagrams;</pre></code></pre>"},{"location":"everything.html","title":"Everything","text":"<pre><code><pre>module everything;import test;import isabelle;import diagrams;</pre></code></pre>"},{"location":"isabelle.html","title":"Juvix can be used to generate Isabelle theories","text":"<p>For example, we can define the following Juvix module, assuming the file is named <code>isabelle.juvix</code>:</p> <pre><code><pre>module isabelle;type Nat : Type :=  | zero  | succ Nat;add : Nat -&gt; Nat -&gt; Nat  | zero n := n  | (succ m) n := succ (add m n);</pre></code></pre> <p>And then we can generate an Isabelle theory from it with the following command:</p> <pre><code>juvix isabelle isabelle.juvix\n</code></pre> <p>This will generate a file <code>isabelle.thy</code> in the current directory.</p> Isabelle/HOL theories for this page"},{"location":"isabelle.html#isabellehol-theories","title":"Isabelle/HOL theories","text":"isabelle<pre><code>theory isabelle\nimports Main\nbegin\n\ndatatype Nat\n  = zero |\n    succ Nat\n\n(* --8&lt;-- [start:isabelle-add-def] *)\nfun add :: \"Nat \\&lt;Rightarrow&gt; Nat \\&lt;Rightarrow&gt; Nat\" where\n  \"add zero n = n\" |\n  \"add (succ m) n = (succ (add m n))\"\n\nend\n</code></pre>"},{"location":"test.html","title":"Test","text":"<p>This is a test file.</p> <p>This is a Juvix code block:</p> <pre><code><pre>module test;import Stdlib.Prelude open;main : String := \"Hello world!\";</pre></code></pre>"}]}