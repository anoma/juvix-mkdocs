{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"everything.html","title":"Everything","text":"<pre><code><pre>module everything;import test;</pre></code></pre>"},{"location":"index.html","title":"Welcome to Your Documentation Project with support for Juvix Code Blocks","text":"<p>This is a testing website for the <code>juvix-mkdocs</code> package, a MkDocs plugin for Juvix that can render Juvix code blocks in Markdown files. To install it, run:</p> <pre><code>pip3 install mkdocs-juvix-plugin\n</code></pre> <p>This website is an example of a documentation website that is built using this package.</p> <p>We created this website by running <code>juvix-mkdocs new</code> with the <code>--anoma-setup</code> flag, which creates a custom theme for the website. This is optional.</p> <pre><code>juvix-mkdocs new my-juvix-project --anoma-setup\n</code></pre> <p>Checkout all the options with:</p> <pre><code>juvix-mkdocs new --help\n</code></pre> <p>Or all the subcommands with:</p> <pre><code>juvix-mkdocs --help\n</code></pre> <p>So, we'll assume that you have already installed <code>juvix</code> and <code>mkdocs</code> on your system. If you haven't installed them yet, please follow the installation instructions on the official Juvix and MkDocs websites.</p>"},{"location":"index.html#what-is-a-juvix-markdown-file","title":"What is a Juvix Markdown File?","text":"<p>A Juvix Markdown file is a special type of Markdown file with the extension <code>.juvix.md</code>. These files are preprocessed by the Juvix compiler to generate the final Markdown output, allowing you to seamlessly integrate Juvix code into your documentation. Easy.</p>"},{"location":"index.html#key-features-of-juvix-markdown","title":"Key Features of Juvix Markdown","text":"<p>For Juvix code blocks:</p> <ol> <li>Start with a module declaration matching the file name.</li> <li>Include well-defined expressions in each block.</li> <li>Use <code>hide</code> attribute to exclude blocks from output.</li> <li>Apply <code>extract-module-statements</code> to show specific code parts.</li> </ol>"},{"location":"index.html#example-module-declaration","title":"Example: Module Declaration","text":"<p>Here's how you declare a module in a Juvix Markdown file named <code>index</code> (notice this file is located in the <code>docs</code> folder, same folder where <code>Package.juvix</code> is located):</p> <pre><code><pre>module index;</pre></code></pre> <p>Refer to the test file <code>test.juvix.md</code> located in the <code>docs</code> folder to see another example.</p>"},{"location":"index.html#hide-juvix-code-blocks","title":"Hide Juvix code blocks","text":"<p>Juvix code blocks come with a few extra features, such as the ability to hide the code block from the final output. This is done by adding the <code>hide</code> attribute to the code block.</p>"},{"location":"index.html#extract-inner-module-statements","title":"Extract inner module statements","text":"<p>Another feature is the ability to extract inner module statements from the code block. This is done by adding the <code>extract-module-statements</code> attribute to the code block. This option can be accompanied by a number to indicate the number of statements to extract. For example, the following would only display the content inside the module <code>B</code>, that is, the module <code>C</code>.</p>"},{"location":"index.html#citing","title":"Citing","text":"<p>This is a citation <sup>1</sup>.</p> <ol> <li> <p>The Author. The title. The Journal, 2024.\u00a0\u21a9</p> </li> </ol>"},{"location":"test.html","title":"Test","text":"<p>This is a test file.</p> <p>This is a Juvix code block:</p> <pre><code><pre>module test;import Stdlib.Prelude open;main : String := \"Hello world!\";</pre></code></pre>"},{"location":"test_to_isabelle.html","title":"test_to_isabelle","text":"<pre><code><pre>module test_to_isabelle;axiom A : Type;axiom B : Type;C : Type := A -&gt; B;axiom fun : C;f : A -&gt; B := fun;</pre></code></pre>"}]}